#!/bin/bash

# Fonction pour mettre la premi√®re lettre en majuscule
capitalize_first() {
    echo "$1" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'
}

# Fonction pour convertir en majuscules
uppercase() {
    echo "$1" | tr '[:lower:]' '[:upper:]'
}

# Fonction pour valider un mot de passe selon les r√®gles classiques AD
validate_password() {
    local password="$1"
    if [[ ${#password} -lt 8 ]]; then
        return 1
    fi
    if ! [[ "$password" =~ [A-Z] ]]; then
        return 1
    fi
    if ! [[ "$password" =~ [a-z] ]]; then
        return 1
    fi
    if ! [[ "$password" =~ [0-9] ]]; then
        return 1
    fi
    if ! [[ "$password" =~ [^a-zA-Z0-9] ]]; then
        return 1
    fi
    return 0
}

# Fonction pour lister les utilisateurs et s√©lectionner
select_user() {
    mapfile -t users < <(samba-tool user list | sort)
    while true; do
        clear
        echo -e "Liste des utilisateurs :"
        for i in "${!users[@]}"; do
            echo "$((i+1)) - ${users[$i]}"
        done
        echo
        echo "0 - Retour au menu principal"
        echo
        echo -ne "Entrez le num√©ro de l'utilisateur : "
        read -r index

        if [[ "$index" == "0" ]]; then
            # R√©initialisation des variables
            selected_user=""
            prenom=""
            nom=""
            description=""
            ou=""
            return 1
        elif [[ "$index" =~ ^[0-9]+$ ]] && (( index >= 1 && index <= ${#users[@]} )); then
            selected_user="${users[$((index-1))]}"

            user_info=$(samba-tool user show "$selected_user")
            prenom=$(echo "$user_info" | grep -i 'givenName:' | awk -F': ' '{print $2}')
            nom=$(echo "$user_info" | grep -i 'sn:' | awk -F': ' '{print $2}')
            description=$(echo "$user_info" | grep -i 'description:' | awk -F': ' '{print $2}')
	    dn_line=$(echo "$user_info" | grep -i '^dn:')
	    ou="${dn_line#dn: }"

            return 0
        else
            echo
            echo -e "‚ùå Entr√©e invalide, veuillez r√©essayer"
            sleep 2
        fi
    done
}

# Fonction authentification root
authentifier_root() {
    echo "üîê Veuillez entrer le mot de passe root pour continuer"
    echo
    ./pam_auth
    if [[ $? -ne 0 ]]; then
        echo "‚ùå Mot de passe incorrect. Op√©ration annul√©e"
        clear
	return 1
    fi
    return 0
}

# Authentification avant acc√®s au menu
clear
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë üîê  Authentification requise pour acc√©der au menu  ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo

if ! authentifier_root; then
#    echo
#    echo "‚ùå √âchec de l'authentification root"
#    echo "üö´ Acc√®s refus√©. Fermeture du script..."
#    echo
    sleep 2
    exit 1
else
    echo
    echo "‚úÖ Authentification r√©ussie"
    sleep 2
fi

# Menu
while true; do
clear
echo
    echo "==== Menu de gestion Samba AD ===="
    echo
    echo "1 - Cr√©er un utilisateur"
    echo "2 - Supprimer un utilisateur"
    echo "3 - R√©initialiser le mot de passe d'un utilisateur"
    echo "4 - D√©sactiver un utilisateur"
    echo "5 - Activer un utilisateur"
    echo "6 - Ajouter un utilisateur √† un groupe"
    echo "7 - Afficher les d√©tails d'un utilisateur"
echo
    echo "0 - Quitter"
echo
    echo -n "Choix : "
    read -r choice

    if ! [[ "$choice" =~ ^[0-7]$ ]]; then
echo
        echo -e "‚ùå Veuillez saisir une option valide"
        sleep 2
        continue
    fi

    case $choice in

# Cr√©er un utilisateur
1)
clear
echo
            echo -n "Pr√©nom : "
            read -r prenom
            echo -n "Nom : "
            read -r nom

            prenom_formate=$(capitalize_first "$prenom")
            nom_formate=$(uppercase "$nom")
            identifiant=$(echo "${prenom:0:1}.$nom" | tr '[:upper:]' '[:lower:]')
            description="$prenom_formate $nom_formate"

            # V√©rifier si l'utilisateur existe d√©j√†
            if samba-tool user show "$identifiant" &>/dev/null; then
clear
echo
                echo "‚ùå L'utilisateur '$identifiant' existe d√©j√†, merci de recommencer"
echo
continue
            fi

            while true; do
                echo -n "Mot de passe : "
                read -rs mdp
                echo ""
                validate_password "$mdp"
                if [[ $? -eq 0 ]]; then
                    break

                else
                    echo "‚ùå Le mot de passe doit contenir au moins :"
                    echo "- 8 caract√®res"
                    echo "- 1 majuscule, 1 minuscule, 1 chiffre, 1 caract√®re sp√©cial"
                    echo "Tapez 0 pour annuler la cr√©ation ou appuyez sur Entr√©e pour r√©essayer"
                    read -r cancel
                    [[ "$cancel" == "0" ]] && continue 2
                fi
            done

	    samba-tool user create "$identifiant" "$mdp" \
 	    --given-name="$prenom_formate" \
	    --surname="$nom_formate" \
 	    --description="$description" \
 	    --must-change-at-next-login

clear
echo
            echo "‚úÖ Utilisateur $description cr√©√© avec l'identifiant : $identifiant"
echo
read -rp "Appuyez sur Entr√©e pour revenir au menu..."
continue
            ;;

# Supprimer un utilisateur
2)
            if select_user; then
                samba-tool user delete "$selected_user"
                clear
                echo
                echo "‚úÖ Utilisateur $description ($selected_user) supprim√©"
                echo
                read -rp "Appuyez sur Entr√©e pour revenir au menu..."
            else
                echo
		continue
            fi
            ;;

# R√©initialiser le mot de passe d'un utilisateur
3)
    if select_user; then
        while true; do
            echo -n "Nouveau mot de passe : "
            read -rs mdp
            echo
            echo -n "Confirmez le mot de passe : "
            read -rs mdp_confirm
            echo

            if [[ "$mdp" != "$mdp_confirm" ]]; then
                echo "‚ùå Les mots de passe ne correspondent pas"
                echo "Tapez 0 pour annuler ou appuyez sur Entr√©e pour r√©essayer"
                read -r cancel
                if [[ "$cancel" == "0" ]]; then
                    echo -e "‚Ü©Ô∏è  Retour au menu principal"
                    sleep 1
                    continue 2
                else
                    continue
                fi
            fi

            validate_password "$mdp"
            if [[ $? -eq 0 ]]; then
                break
            else
                echo "‚ùå Mot de passe invalide"
                echo "Tapez 0 pour annuler ou appuyez sur Entr√©e pour r√©essayer"
                read -r cancel
                if [[ "$cancel" == "0" ]]; then
                    echo -e "‚Ü©Ô∏è  Retour au menu principal"
                    sleep 1
                    continue 2
                fi
            fi
        done

        samba-tool user setpassword "$selected_user" --newpassword="$mdp" --quiet
        clear
        echo
        echo "‚úÖ Mot de passe modifi√© pour $description ($selected_user)"
        echo
        read -rp "Appuyez sur Entr√©e pour revenir au menu..."
    else
        continue
    fi
    ;;

# D√©sactiver un utilisateur
4)
            if select_user; then
                samba-tool user disable "$selected_user"
                clear
                echo
                echo "‚úÖ Utilisateur d√©sactiv√© : $description ($selected_user)"
                echo
                read -rp "Appuyez sur Entr√©e pour revenir au menu..."
            else
                continue
            fi
            ;;

# Activer un utilisateur
5)
            if select_user; then
                samba-tool user enable "$selected_user"
                clear
                echo
                echo "‚úÖ Utilisateur activ√© : $description ($selected_user)"
                echo
                read -rp "Appuyez sur Entr√©e pour revenir au menu..."
            else
                continue
            fi
            ;;

# Ajouter un utilisateur √† un groupe
6)
	    if select_user; then
	        # R√©cup√©ration et tri des groupes
	        mapfile -t groups < <(samba-tool group list | sort)
	        while true; do
	            clear
	            echo -e "Liste des groupes :"
	            for i in "${!groups[@]}"; do
	                echo "$((i+1)) - ${groups[$i]}"
	            done
	            echo
	            echo "0 - Annuler et revenir au menu principal"
	            echo -ne "Entrez le num√©ro du groupe : "
	            read -r group_index

	            if [[ "$group_index" == "0" ]]; then
	                break
	            elif [[ "$group_index" =~ ^[0-9]+$ ]] && (( group_index >= 1 && group_index <= ${#groups[@]} )); then
	                group_selected="${groups[$((group_index-1))]}"
	                samba-tool group addmembers "$group_selected" "$selected_user"
	                clear
	                echo
	                echo "‚úÖ $selected_user ($prenom $nom - $description) ajout√© au groupe $group_selected"
	                echo
	                read -rp "Appuyez sur Entr√©e pour revenir au menu..."
	                break
	            else
	                echo -e "‚ùå Entr√©e invalide, veuillez saisir un num√©ro valide"
	                sleep 2
	            fi
	        done
	    else
	        continue
	    fi
	    ;;

# Afficher les d√©tails d'un utilisateur
7)
    if select_user; then
        clear
        echo -e "üîç Informations d√©taill√©es pour $prenom $nom ($selected_user) :"

        user_info=$(samba-tool user show "$selected_user")

        # Extraction des champs utiles
        sn=$(echo "$user_info" | grep -i '^sn:' | awk -F': ' '{print $2}')
        description=$(echo "$user_info" | grep -i '^description:' | awk -F': ' '{print $2}')
        givenName=$(echo "$user_info" | grep -i '^givenName:' | awk -F': ' '{print $2}')
        whenCreatedRaw=$(echo "$user_info" | grep -i '^whenCreated:' | awk -F': ' '{print $2}')
        lastLogon=$(echo "$user_info" | grep -i '^lastLogon:' | awk -F': ' '{print $2}')
        logonCount=$(echo "$user_info" | grep -i '^logonCount:' | awk -F': ' '{print $2}')
        sAMAccountName=$(echo "$user_info" | grep -i '^sAMAccountName:' | awk -F': ' '{print $2}')
        userPrincipalName=$(echo "$user_info" | grep -i '^userPrincipalName:' | awk -F': ' '{print $2}')
        userAccountControl=$(echo "$user_info" | grep -i '^userAccountControl:' | awk -F': ' '{print $2}')
        dn_line=$(echo "$user_info" | grep -i '^dn:')
        ou="${dn_line#dn: }"

        # Formatage simple de la date whenCreated ‚Üí JJ/MM/AAAA
        jour=${whenCreatedRaw:6:2}
        mois=${whenCreatedRaw:4:2}
        annee=${whenCreatedRaw:0:4}
        whenCreatedFormatted="$jour/$mois/$annee"

        # Interpr√©tation du statut du compte
        if [[ "$userAccountControl" == "514" ]]; then
            statut="‚ùå D√©sactiv√©"
        else
            statut="‚úÖ Activ√©"
        fi

        echo -e "üë§ Nom complet            : $givenName $sn"
        echo -e "üÜî Identifiant            : $sAMAccountName"
        echo -e "üìõ Description            : $description"
        echo -e "üìÇ Emplacement (OU)       : $ou"
        echo -e "üì® Adresse de connexion   : $userPrincipalName"
        echo -e "üìÖ Cr√©√© le                : $whenCreatedFormatted"
        echo -e "üîì Derni√®re connexion     : $lastLogon"
        echo -e "üîÅ Nombre de connexions   : $logonCount"
        echo -e "üîí Statut du compte       : $statut"
        echo
        read -rp "Appuyez sur Entr√©e pour revenir au menu..."
    else
        continue
    fi
    ;;

        0)
clear
            exit 0
            ;;

        *)
            echo "‚ùå Choix invalide, r√©essayez"
            ;;
    esac

done
